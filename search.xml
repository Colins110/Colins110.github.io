<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ubuntu安装nodejs]]></title>
    <url>%2F2018%2F04%2F07%2Fubuntu%E5%AE%89%E8%A3%85nodejs%2F</url>
    <content type="text"><![CDATA[​ 通过ubuntu包管理器安装nodejs，需要引入第三方库。nodejs官方提供了添加脚本。在deb.nodesource.com 中可以看到。在终端中运行:12curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -sudo apt-get install -y nodejs 就可以安装最新的nodejs 8.x版本了。其他版本可在deb.nodesource.com上查找。]]></content>
      <categories>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用IntelliJ IDEA创建Hibernate项目]]></title>
    <url>%2F2017%2F07%2F09%2F%E4%BD%BF%E7%94%A8IntelliJ-IDEA%E5%88%9B%E5%BB%BAHibernate%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[最近正在学习web开发的三大框架即SSH ，目前正在学习Hibernate 操作数据库，由于其版本的更新，其中需要注意到的一些小问题。 下面是在IntelliJ IDEA下创建一个Hibernate项目的过程。目前来说，IntelliJ IDEA作为一款优秀的IDE开发工具，其工具集成度很高。所以我们可以直接建立一个Hibernate项目：勾选Hibernate框架，这里我们看到Hibernate的最新版是5.2.10，勾选Create default hibernate configuratuion and main class ，让IDE为我们自动生成Hibernate的配置文（Hibernate.cfg.xml)， 等待IDE为我们下载好所需的jar包，完成项目的创建。 接下来我们创建一个包，包名为com.colins110.test，看到我们的Hibernate 配置文件已经自动创建了，我们要对配置文件进行一些修改：这里我使用的是mysql，需要导入mysql的驱动包，这里我是用的是mysql-connector-java-5.1.42，在mysql官网可以获取。配置如下: 连接url：jdbc:mysql:///hibernate?useUnicode=true&amp;characterEncoding=UTF-8 我的数据库名为hibernate ，?后表明使用unicode字符集，在xml文件中&amp;需要写成&amp;amp;。 数据库驱动：com.mysql.jdbc.Driver这里使用的是上面导入的驱动包 用户名：默认为root 密码：我的密码为空 使用方言：mysql方言有多种，这里选择org.hibernate.dialect.MySQL5Dialect新版方言 show_sql属性：在命令行显示生成的sql语句format_sql属性：格式化输出sql语句 hbm2ddl属性：设置为create，每次重新创建表 这样我们的Hibernate环境就配置好了 接下来需要配置一个实体类，用来表示数据库中的一个表，每个实体类对象则表示表中的一条记录，这样的话，我们在编程的时候只需要面向对象编程，而不需要写SQL语句了。 在这里我建立了一个Students类，这是一个典型的java Bean12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576package com.colins110.test;import java.util.Date;/** * Created by colin on 2017/7/9 0009. *///学生类public class Students &#123; private int sid; private String sname; private String gender; private Date birthday; private String address; public Students() &#123;&#125; public Students(int sid, String sname, String gender, Date birthday, String address) &#123; this.sid = sid; this.sname = sname; this.gender = gender; this.birthday = birthday; this.address = address; &#125; public int getSid() &#123; return sid; &#125; public void setSid(int sid) &#123; this.sid = sid; &#125; public String getSname() &#123; return sname; &#125; public void setSname(String sname) &#123; this.sname = sname; &#125; public String getGender() &#123; return gender; &#125; public void setGender(String gender) &#123; this.gender = gender; &#125; public Date getBirthday() &#123; return birthday; &#125; public void setBirthday(Date birthday) &#123; this.birthday = birthday; &#125; public String getAddress() &#123; return address; &#125; public void setAddress(String address) &#123; this.address = address; &#125; @Override public String toString() &#123; return "Students&#123;" + "sid=" + sid + ", sname='" + sname + '\'' + ", gender='" + gender + '\'' + ", birthday=" + birthday + ", address='" + address + '\'' + '&#125;'; &#125;&#125; 现在需要建立一个对应的配置文件，指明java Bean和数据库中表的映射关系，这里是Students.hbm.xml。12345678910111213141516171819202122232425&lt;?xml version='1.0' encoding='utf-8'?&gt;&lt;!DOCTYPE hibernate-mapping PUBLIC "-//Hibernate/Hibernate Mapping DTD 3.0//EN" "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"&gt;&lt;hibernate-mapping&gt; &lt;class name="com.colins110.test.Students" table="Students"&gt; &lt;id name="sid" type="int"&gt; &lt;column name="id" /&gt; &lt;generator class="assigned"/&gt; &lt;/id&gt; &lt;property name="sname" type="java.lang.String"&gt; &lt;column name="name" /&gt; &lt;/property&gt; &lt;property name="gender" type="java.lang.String"&gt; &lt;column name="sex" /&gt; &lt;/property&gt; &lt;property name="birthday" type="java.util.Date"&gt; &lt;column name="birthday" /&gt; &lt;/property&gt; &lt;property name="address" type="java.lang.String"&gt; &lt;column name="address"/&gt; &lt;/property&gt; &lt;/class&gt;&lt;/hibernate-mapping&gt; 下载需要将Students.hbm.xml映射文件配置到配置文件中：下面使用Juint4对hibernate进行测试 编写测试代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748package com.colins110.test;import org.hibernate.Session;import org.hibernate.SessionFactory;import org.hibernate.Transaction;import org.hibernate.boot.registry.StandardServiceRegistryBuilder;import org.hibernate.cfg.Configuration;import org.hibernate.service.ServiceRegistry;import org.junit.After;import org.junit.Before;import org.junit.Test;import java.util.Date;import static org.junit.Assert.*;/** * Created by colin on 2017/7/9 0009. */public class StudentsTest &#123; private Configuration config; private SessionFactory sf; private Session session; private Transaction transaction; @Before public void setUp() throws Exception &#123; config=new Configuration().configure(); ServiceRegistry serviceRegistry=new StandardServiceRegistryBuilder().applySettings(config.getProperties()).configure().build(); sf=config.buildSessionFactory(serviceRegistry); session=sf.openSession(); transaction=session.beginTransaction(); &#125; @After public void tearDown() throws Exception &#123; transaction.commit(); session.close(); sf.close(); &#125; @Test public void test() &#123; Students user=new Students(120,"董健","男",new Date(),"四川"); session.save(user); &#125;&#125; 注意： 在5.x版的Hibernate中，需要使用ServiceRegistry serviceRegistry=new StandardServiceRegistryBuilder().applySettings(config.getProperties()).configure().build();来注册服务在4.x中使用ServiceRegistry serviceRegistry=new ServiceRegistryBuilder().applySettings(config.getProperties()).buildServiceRegistry();来注册服务]]></content>
      <categories>
        <category>Java Web</category>
      </categories>
      <tags>
        <tag>IntelliJ IDEA</tag>
        <tag>Hibernate</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用win10创意者更新自带工具MBR2GPT完成系统盘的MBR到GPT的无损转换]]></title>
    <url>%2F2017%2F06%2F11%2F%E4%BD%BF%E7%94%A8win10%E5%88%9B%E6%84%8F%E8%80%85%E6%9B%B4%E6%96%B0%E8%87%AA%E5%B8%A6%E5%B7%A5%E5%85%B7MBR2GPT%E5%AE%8C%E6%88%90%E7%B3%BB%E7%BB%9F%E7%9B%98%E7%9A%84MBR%E5%88%B0GPT%E7%9A%84%E6%97%A0%E6%8D%9F%E8%BD%AC%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[之前如果需要将MBR格式的硬盘转换为GPT硬盘，要么选择格盘重装系统，这样数据会丢失。如果需要数据无损转换的话，手工转换比较复杂，或者可以使用第三方的分区工具完成。这里我们介绍微软官方提供的无损转换工具MBR2GPT，工具已经内置到win10创意者更新里了，这里我们可以在命令行里直接调用！ 这是官方参考文档: 点此阅读 注意事项 在转换过程中会创建UEFI系统分区，这会占用一个MBR主分区，而因为MBR磁盘最多只能有四个主分区，所以待转换的MBR磁盘不能超过四个主分区； BitLocker加密磁盘需要先解除BitLocker加密之后才能使用MBR2GPT进行转换； 即使当前安装的Win10 1703之前的早期Win10版本（1607，1511，1507），依然能够使用MBR2GPT进行转换，只不过需要使用Win10 1703系统盘启动进入WinRE环境，才能运行MBR2GPT工具。 这是我们演示将本机的系统盘转换为GPT文件格式步骤一:启动进入WinRE环境，如果不懂如何进入，请点击阅读 进入后选择命令提示符 步骤二使用命令disk查看里的磁盘序号。 步骤三启动MBR2GPT程序，带上参数/validate和/disk:1，用于指定对1号磁盘（系统盘）进行检查，如果提示successfully说明可以进行转换。1mbr2gpt /validate /disk:1 开始转换完成后类似如下提示:1234567891011121314151617MBR2GPT will now attempt to convert disk 0.If conversion is successful the disk can only be booted in GPT mode.These changes cannot be undone!MBR2GPT: Attempting to convert disk 0MBR2GPT: Retrieving layout of diskMBR2GPT: Validating layout, disk sector size is: 512 bytesMBR2GPT: Trying to shrink the system partitionMBR2GPT: Trying to shrink the OS partitionMBR2GPT: Creating the EFI system partitionMBR2GPT: Installing the new boot filesMBR2GPT: Performing the layout conversionMBR2GPT: Migrating default boot entryMBR2GPT: Adding recovery boot entryMBR2GPT: Fixing drive letter mappingMBR2GPT: Conversion completed successfullyMBR2GPT: Before the new system can boot properly you need to switch the firmware to boot to UEFI mode! 最后记得将主板上的启动模式改为UEFI mode!更多细节参见官方手册]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>分区无损转换</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown语法]]></title>
    <url>%2F2017%2F06%2F06%2FMarkdown%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[这是我的第一篇文章首先，回忆一下Markdown语法 标题 标题可以根据字体大小分为六级，分别用不同数量的#表示【效果】 这是一级标题这是二级标题这是三级标题这是四级标题这是五级标题这是六级标题【输入】123456#这是一级标题##这是二级标题###这是三级标题####这是四级标题#####这是五级标题######这是六级标题 文本 【效果】粗体斜体粗体+斜体【输入】123**这是粗体***这是斜体****这是粗体+斜体*** 图片 【效果】【输入】1![我的博客主页](Markdown语法/我的主页.png) 列表 列表分为有序列表和无序列表无序列表可以通过在每行文本前输入*,+,-来实现【效果】 星号实现的列表 加号实现的列表 减号实现的列表 注意符号与文本之间要有一个空格 【输入】1234* 星号实现的列表+ 加号实现的列表- 减号实现的列表* 注意符号与文本之间要有一个空格 有序列表可以通过在每行文本前面输入数字+.+空格来实现【效果】 第一行 第二行 第三行 【输入】1231. 第一行2. 第二行3. 第三行 引用 【效果】 这是一段引用啦 【输入】1&gt;这是一段引用啦 行内代码块 行内代码块可用于关键字词，将其与普通文本文件分别开来，其用法是在文本内容外套上”`“，即反引号。 【效果】这是一段行内代码块【输入】1`这是一段行内代码块` 代码块 【效果】12345public class test&#123; public static void main()&#123; System.out.println("This is a test_class!"); &#125;&#125; 表格 【效果】|默认|居中|左对齐|右对齐||–|:-:|:-|-:||换行\n换行失败|我的Markdown|不支持|换行||支持斜体|粗体|斜体+粗体|||# 不支持标题|支持链接||支持行内代码块 | 【输入】12345|默认|居中|左对齐|右对齐||--|:-:|:-|-:||换行\n换行失败|我的Markdown|不支持|换行||*支持斜体*|**粗体**|***斜体+粗体***|||# 不支持标题|[支持链接](http://jianshu.com)|![支持图片](https://cdn.sspai.com/attachment/origin/2014/04/15/69488.png?imageMogr2/quality/90/thumbnail/100x)|`支持行内代码块` | 删除线 【效果】删除线【输入】1~~删除线~~ 分割线 分割线可使用*、-来实现。【效果】 【输入】12---***]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Win10进入恢复模式]]></title>
    <url>%2F2017%2F06%2F01%2FWin10%E8%BF%9B%E5%85%A5%E6%81%A2%E5%A4%8D%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[【科普】 什么是windows恢复模式windows恢复环境 (Windows Recovery Environment),，简称WinRE，是微软从Windows Vista开始引入的用于系统恢复和还原的一套环境。WinRE默认安装在系统分区前的隐藏分区中。 那么如何进入呢？ 方法一： Win10单系统开机时按F8键进入WinRE如果你的电脑是Windows10单系统的话，开机不停地按F8键即可进入WInRE。 方法二：通过设置进入WinRE1.打开电脑设置2.进入更新和安全，在恢复选项中点击高级启动立即重启 3.系统重启后进入恢复模式]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>恢复模式</tag>
      </tags>
  </entry>
</search>
